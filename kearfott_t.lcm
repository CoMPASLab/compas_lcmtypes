/*
* kearfott_t.lcm
* 
* lcm definition that matches the binary data output message
* generated by the PCDAS software that interfaces the kearfott
* INS with the rest of the OI subsystem. 
* 
*  Copyright 2019 MBARI
*
*/

package oi;

struct kearfott_t {

    // Time since Unix Epoch
    double time_unix_sec;

    // LCM publish count
    int64_t count_publish;

    // Self identifier for sender.
    string sender_id;

    // Start Message Specific data items.
    
    int16_t cycles_uint; //incrementing counter

    /* 
    *   Note: D3 - MODE â€“ SYSTEM MODE - CODED HEXIDECIMAL definition (Figure 19)
    *   MODE SYSTEM MODE
    *   00H = IDLE
    *   01H = COARSE STATIONARY ALIGN
    *   02H = FINE STATIONARY ALIGN - NOT COMPLETE
    *   03H = FINE STATIONARY ALIGN - COMPLETE
    *   04H = COARSE GPS ALIGN
    *   05H = FINE GPS ALIGN - NOT COMPLETE
    *   06H = FINE GPS ALIGN - COMPLETE
    *   07H = DOPPLER/EM LOG ALIGN - NOT COMPLETE
    *   08H = SPARE
    *   09H = AIDED NAVIGATION
    *   0AH = NO/GO (SYSTEM FAILURE)
    *   NOTE: All other states are invalid.
    */
    byte mode;    // Status Byte

    /*
    *   NAVIGATION MONITOR BINARY *   DISCRETES
    *   BIT # DEFINITION
    *   7 DEPTH LOOP OPEN > 1 MINUTE TRUE 1, FALSE 0
    *   6 GPS DATA PROCESSED TRUE 1, FALSE 0
    *   5 GPS DATA REJECTED TRUE 1, FALSE 0
    *   4 DOPPLER/EM-LOG DATA PROCESSED TRUE 1, FALSE 0
    *   3 DOPPLER/EM-LOG DATA REJECTED TRUE 1, FALSE 0
    *   2 ZUPT PROCESSED TRUE 1, FALSE 0
    *   1 ALIGN WITHOUT POSITION TRUE 1, FALSE 0
    *   0 VALID DVL HEIGHT TRUE 1, FALSE 0
    */
    byte monitor; // Mode Status Byte


    double latitude_rad; //radians, positive is north
    double longitude_rad; //radians, positive is east
    double northing_m; //meters from current datum
    double easting_m; //meters from current datum
    float depth_m; //meters
    float bheight_m; //meters, altitude
    float roll_rad;    //radians
    float pitch_rad;   //radians
    float heading_rad; //radians
    float vbodyx_ms; //m/s 
    float vbodyy_ms; //m/s
    float vbodyz_ms; //m/s
    float accelx_ms2; //m/s^2
    float accely_ms2; //m/s^2
    float accelz_ms2; //m/s^2
    float prate_rads;  //rad/s
    float qrate_rads;  //rad/s
    float rrate_rads;  //rad/s
    float utcTime;
    float sampleTime;

    int16_t num_doubles;
    double_t doubles[num_doubles];
}